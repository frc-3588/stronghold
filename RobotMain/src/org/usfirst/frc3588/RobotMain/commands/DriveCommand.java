// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc3588.RobotMain.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3588.RobotMain.Robot;
import org.usfirst.frc3588.RobotMain.RobotMap;

/**
 *
 */
public class DriveCommand extends Command {
	private double powerRight, powerLeft, time;
	Timer timer = new Timer();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public DriveCommand() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.driveSystem);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	public DriveCommand(double powerRight, double powerLeft, double time) {
		this.powerRight = powerRight;
		this.powerLeft = powerLeft;
		this.time = time;
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		if (getAutoStatus()) {
			timer.start();
		}
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if (getAutoStatus()) {
			RobotMap.driveSystemRobotDrive.tankDrive(powerLeft, powerRight);
		} else {
			RobotMap.driveSystemRobotDrive.tankDrive(Robot.oi.getJoystickLeft().getY(),
					Robot.oi.getJoystickRight().getY());
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		if (timer.get() == time && getAutoStatus()) {
			return true;
		} else {
			return false;
		}
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
	}

	private boolean getAutoStatus() {
		if (powerLeft != 0 && powerRight != 0 && time != 0) {
			return true;
		}
		return false;
	}
}
