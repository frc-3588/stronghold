// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3588.RobotMain;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon acqConveyorArm;
    public static CANTalon acqArmRotate;
    public static DigitalInput acqLineBreakSensor;
    public static CANTalon driveSystemRightMotor;
    public static CANTalon driveSystemLeftMotor;
    public static RobotDrive driveSystemRobotDrive;
    public static Ultrasonic driveSystemUltrasonic;
    public static CANTalon shootingLauncher;
    public static Encoder shootingQuadratureEncoder;
    public static AnalogInput shootingInfrared;
    public static SpeedController climbingMotor;
    public static CANTalon defenseArm;
    public static Servo cameraXServo;
    public static Servo cameraYServo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        acqConveyorArm = new CANTalon(5);
        LiveWindow.addActuator("Acq", "ConveyorArm", acqConveyorArm);
        
        acqArmRotate = new CANTalon(6);
        LiveWindow.addActuator("Acq", "ArmRotate", acqArmRotate);
        
        acqLineBreakSensor = new DigitalInput(7);
        LiveWindow.addSensor("Acq", "LineBreakSensor", acqLineBreakSensor);
        
        driveSystemRightMotor = new CANTalon(7);
        LiveWindow.addActuator("DriveSystem", "Right Motor", driveSystemRightMotor);
        
        driveSystemLeftMotor = new CANTalon(8);
        LiveWindow.addActuator("DriveSystem", "Left Motor", driveSystemLeftMotor);
        
        driveSystemRobotDrive = new RobotDrive(driveSystemLeftMotor, driveSystemRightMotor);
        
        driveSystemRobotDrive.setSafetyEnabled(true);
        driveSystemRobotDrive.setExpiration(0.1);
        driveSystemRobotDrive.setSensitivity(0.5);
        driveSystemRobotDrive.setMaxOutput(1.0);

        driveSystemRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        driveSystemUltrasonic = new Ultrasonic(0, 1);
        LiveWindow.addSensor("DriveSystem", "Ultrasonic", driveSystemUltrasonic);
        
        shootingLauncher = new CANTalon(9);
        LiveWindow.addActuator("Shooting", "Launcher", shootingLauncher);
        
        shootingQuadratureEncoder = new Encoder(4, 5, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooting", "Quadrature Encoder ", shootingQuadratureEncoder);
        shootingQuadratureEncoder.setDistancePerPulse(48.0);
        shootingQuadratureEncoder.setPIDSourceType(PIDSourceType.kRate);
        shootingInfrared = new AnalogInput(3);
        LiveWindow.addSensor("Shooting", "Infrared", shootingInfrared);
        
        climbingMotor = new Talon(0);
        LiveWindow.addActuator("Climbing", "Motor", (Talon) climbingMotor);
        
        defenseArm = new CANTalon(0);
        LiveWindow.addActuator("Defense", "Arm", defenseArm);
        
        cameraXServo = new Servo(3);
        LiveWindow.addActuator("Camera", "XServo", cameraXServo);
        
        cameraYServo = new Servo(4);
        LiveWindow.addActuator("Camera", "YServo", cameraYServo);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
